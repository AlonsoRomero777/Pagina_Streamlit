import math
import numpy as np
import matplotlib.pyplot as plt
import streamlit as st
import time

def funcion_00(x: float) -> float:
    return x**2 + 3

def lata(r: float) -> float:
    return 2 * math.pi * r * r + (500 / r)

def caja(l: float) -> float:
    return -(4 * pow(l, 3) - 60 * l * l + 200 * l)

def funcion_0(x: float) -> float:
    return float('inf') if x == 0 else x**2 + (54/x)

def funcion_1(x: float) -> float:
    return x**3 + 2*x - 3

def funcion_2(x: float) -> float:
    return x**4 + x**2 - 33

def funcion_3(x: float) -> float:
    return 3*x**4 - 8*x**3 - 6*x**2 + 12*x

funciones = {
    "x¬≤ + 3": funcion_00,
    "Lata (√°rea)": lata,
    "Caja (volumen negativo)": caja,
    "x¬≤ + 54/x": funcion_0,
    "x¬≥ + 2x - 3": funcion_1,
    "x‚Å¥ + x¬≤ - 33": funcion_2,
    "3x‚Å¥ - 8x¬≥ - 6x¬≤ + 12x": funcion_3
}


def intervalos_mitad(a: float, b: float, epsilon: float, func: callable, rango_grafica=None):
    points = []
    intervalos = []

    if rango_grafica is None:
        rango_grafica = (a, b)  

    grafico_placeholder = st.empty()  

    while (b - a) > epsilon:
        xm = (a + b) / 2
        L = b - a
        x1 = a + L / 4
        x2 = b - L / 4
        f_xm = func(xm)
        f_x1 = func(x1)
        f_x2 = func(x2)

        points.append((x1, f_x1))
        points.append((x2, f_x2))
        intervalos.append((a, b))

        fig = plot_function_with_points(func, rango_grafica[0], rango_grafica[1], points, f"Intervalos por la Mitad - {opcion}")
        grafico_placeholder.pyplot(fig)
        time.sleep(0.5) 

        if f_x1 < f_xm:
            b = xm
        elif f_x2 < f_xm:
            a = xm
        else:
            a, b = x1, x2

    return (a + b) / 2, points, intervalos



def plot_function_with_points(func, a, b, points, title):
    x = np.linspace(a, b, 1000)
    y = [func(xi) for xi in x]
    fig, ax = plt.subplots(figsize=(6, 3))
    ax.plot(x, y, label='Funci√≥n', color='blue')

    if points:
        x_points, y_points = zip(*points)
        ax.scatter(x_points, y_points, color='red', label='Puntos evaluados')

    ax.set_title(title)
    ax.set_xlabel('x')
    ax.set_ylabel('f(x)')
    ax.grid(True)
    ax.legend()
    
    return fig


st.title("Intervalos por la Mitad")

texto_justificado = """
<div style="text-align: justify;">
<p>El m√©todo de <strong>intervalos por la mitad</strong>, tambi√©n conocido como <i>Interval Halving Method</i>, 
es una t√©cnica de optimizaci√≥n que se utiliza para encontrar el m√≠nimo (o en ocasiones el m√°ximo) 
de una funci√≥n en un intervalo cerrado, siempre que dicha funci√≥n sea unimodal en ese intervalo.</p>

<p>Una funci√≥n unimodal es aquella que presenta un solo m√≠nimo (o m√°ximo) dentro del intervalo analizado. 
Este m√©todo pertenece a la categor√≠a de t√©cnicas de <strong>b√∫squeda directa</strong>, lo que significa que no necesita 
derivadas ni informaci√≥n sobre la pendiente de la funci√≥n. Es un m√©todo determinista y sencillo que reduce 
el intervalo de b√∫squeda en cada iteraci√≥n, lo que facilita su implementaci√≥n.</p>

<p>El procedimiento consiste en dividir el intervalo actual en cuatro partes iguales, evaluando la funci√≥n 
en tres puntos estrat√©gicos: el punto medio del intervalo y dos puntos sim√©tricos a una distancia fija a la izquierda 
y derecha del centro. Dependiendo de los valores obtenidos, se elimina la secci√≥n que no contiene el m√≠nimo 
y se contin√∫a el proceso con el nuevo intervalo m√°s peque√±o.</p>

<p><strong>Ventajas: üëç</strong></p>
<ul>
<li>F√°cil de implementar y comprender.</li>
<li>No requiere derivadas ni conocimientos del comportamiento de la funci√≥n m√°s all√° de su unimodalidad.</li>
<li>Reduce de forma constante el intervalo de b√∫squeda, garantizando convergencia al √≥ptimo.</li>
</ul>

<p><strong>Desventajas:üëé</strong></p>
<ul>
<li>Puede requerir m√°s evaluaciones que otros m√©todos m√°s eficientes como la b√∫squeda dorada o Fibonacci.</li>
<li>No se adapta autom√°ticamente a funciones con comportamiento complejo fuera del supuesto unimodal.</li>
</ul>

<p>Este m√©todo es ideal para situaciones donde se necesita una soluci√≥n r√°pida, robusta y sin requerimientos avanzados, 
especialmente √∫til en problemas de optimizaci√≥n unidimensional con funciones costosas de evaluar o no derivables.</p>
</div>
"""

st.markdown(texto_justificado, unsafe_allow_html=True)


opcion = st.selectbox("**Selecciona la funci√≥n a optimizar**", list(funciones.keys()))
funcion = funciones[opcion]

a = st.number_input("L√≠mite inferior (a)", value=0.0, key="a_mitad")
b = st.number_input("L√≠mite superior (b)", value=5.0, key="b_mitad")
epsilon = st.number_input("Precisi√≥n deseada (Œµ)", value=0.0001, min_value=1e-6, format="%.6f")

if st.button("Ejecutar m√©todo"):
    if a >= b:
        st.error("El l√≠mite inferior debe ser menor que el superior.")
    else:
        x_min, puntos, intervalos = intervalos_mitad(a, b, epsilon, funcion, rango_grafica=(a, b))
        st.success(f"M√≠nimo aproximado en x ‚âà {x_min:.6f}")
        st.write(f"√öltimo intervalo: [{intervalos[-1][0]:.6f}, {intervalos[-1][1]:.6f}]")

        

