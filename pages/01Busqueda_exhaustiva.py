import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import math
import time


def funcion_chida(x: float) -> float:
    x_alpha1 = 2 + x * 2
    x_alpha2 = 1 + x * 5
    return (x_alpha1 - 10)**2 + (x_alpha2 - 10)**2

def funcion_00(x: float) -> float:
    return x**2 + 3

def lata(r: float) -> float:
    return 2 * math.pi * r * r + (500 / r)

def caja(l: float) -> float:
    return -(4 * pow(l, 3) - 60 * l * l + 200 * l)

def funcion_0(x: float) -> float:
    return float('inf') if x == 0 else x**2 + (54/x)

def funcion_1(x: float) -> float:
    return x**3 + 2*x - 3

def funcion_2(x: float) -> float:
    return x**4 + x**2 - 33

def funcion_3(x: float) -> float:
    return 3*x**4 - 8*x**3 - 6*x**2 + 12*x



import time

def busqueda_exhaustiva_animada(a: float, b: float, n: int, funcion: callable):
    delta_x = (b - a) / n
    x1 = a
    x2 = x1 + delta_x
    x3 = x2 + delta_x

    valores_x = []
    valores_y = []

    grafico_placeholder = st.empty()

    while x3 <= b and not (funcion(x1) >= funcion(x2) <= funcion(x3)):
        valores_x.append(x2)
        valores_y.append(funcion(x2))

        fig, ax = plt.subplots(figsize=(6, 3))
        ax.plot(valores_x, valores_y, 'bo-', label='Puntos evaluados')
        ax.set_xlabel('x')
        ax.set_ylabel('f(x)')
        ax.set_title(f'B√∫squeda en [{a}, {b}]')
        ax.legend()
        grafico_placeholder.pyplot(fig)
        time.sleep(0.3)  

        x1 = x2
        x2 = x3
        x3 = x2 + delta_x

    return x1, x3


st.title("B√∫squeda Exhaustiva üîù")

st.markdown("""
<style>
.justify-text {
    text-align: justify;
}
</style>

<div class="justify-text">
<p>La <strong>b√∫squeda exhaustiva</strong> es uno de los m√©todos m√°s simples pero efectivos en optimizaci√≥n unidimensional.
Consiste en evaluar una funci√≥n en varios puntos distribuidos uniformemente dentro de un intervalo definido por el usuario, 
con el objetivo de identificar el punto que proporciona el valor m√≠nimo (o m√°ximo) de la funci√≥n.</p>

<p>Este m√©todo parte de un <strong>l√≠mite inferior</strong> y un <strong>l√≠mite superior</strong> para la variable de decisi√≥n,
dividiendo el intervalo en segmentos de tama√±o igual determinado por una precisi√≥n o incremento <strong>Œîx</strong>. 
Luego, se eval√∫an los valores de la funci√≥n en esos puntos y se comparan <strong>tres consecutivos</strong> a la vez 
para encontrar el √≥ptimo, bajo el supuesto de que la funci√≥n es <strong>unimodal</strong> (tiene un solo m√≠nimo o m√°ximo en el intervalo).</p>

<h4>üëç Ventajas:</h4>
<ul>
<li>F√°cil de implementar y entender.</li>
<li>No requiere derivadas ni informaci√≥n adicional de la funci√≥n.</li>
<li>Puede aplicarse a funciones discontinuas o con ruido.</li>
</ul>

<h4>üëé Desventajas:</h4>
<ul>
<li>Poco eficiente para funciones complejas o de alta dimensi√≥n.</li>
<li>Puede requerir muchas evaluaciones para alcanzar una buena precisi√≥n.</li>
<li>No garantiza encontrar el m√≠nimo global si hay m√∫ltiples √≥ptimos locales.</li>
</ul>

<h4> ¬øCu√°ndo usarla?</h4>
<p>La b√∫squeda exhaustiva es ideal para problemas donde se desconoce la forma de la funci√≥n, o cuando √©sta 
es dif√≠cil de derivar o no es continua. Tambi√©n se usa para validar el comportamiento de otros m√©todos 
m√°s sofisticados, al servir como <strong>punto de referencia</strong> por su simplicidad.</p>

<h4> ¬øQu√© puedes hacer en esta aplicaci√≥n?</h4>
<ul>
<li>Seleccionar la funci√≥n a optimizar.</li>
<li>Definir el intervalo de b√∫squeda (l√≠mites inferior y superior).</li>
<li>Ajustar la precisi√≥n mediante el par√°metro <strong>Œîx</strong>.</li>
<li>Visualizar el recorrido de puntos evaluados y el √≥ptimo encontrado.</li>
</ul>

</div>
""", unsafe_allow_html=True)

funciones = {
    "Ejercicio 1: f(x) = x¬≤ + 3": (funcion_00, -2, 2),
    "Funci√≥n Lata": (lata, 0.1, 10),
    "Funci√≥n Caja": (caja, 2, 3),
    "Funci√≥n 0: f(x) = x¬≤ + 54/x": (funcion_0, 0.1, 10),
    "Funci√≥n 1: f(x) = x¬≥ + 2x - 3": (funcion_1, 0, 5),
    "Funci√≥n 2: f(x) = x‚Å¥ + x¬≤ - 33": (funcion_2, -2.5, 2.5),
    "Funci√≥n 3: f(x) = 3x‚Å¥ - 8x¬≥ - 6x¬≤ + 12x": (funcion_3, -1.5, 3),
    "Funci√≥n Chida": (funcion_chida, 0, 5),
    "Funci√≥n Personalizada": (None, -10, 10)
}

seleccion = st.selectbox("**Selecciona la funci√≥n a optimizar:**", list(funciones.keys()))
funcion, a_def, b_def = funciones[seleccion]

if seleccion == "Funci√≥n Personalizada":
    expresion = st.text_input("Escribe tu funci√≥n en t√©rminos de x (ej. x**2 + 3*x - 1):", value="x**2")
    try:
        funcion = lambda x: eval(expresion, {"x": x, "math": math, "np": np})
        st.success("Funci√≥n cargada correctamente.")
    except Exception as e:
        st.error(f"Error al interpretar la funci√≥n: {e}")
        funcion = None


a = st.number_input("L√≠mite inferior (a)", value=float(a_def))
b = st.number_input("L√≠mite superior (b)", value=float(b_def))
precision = st.number_input("Precisi√≥n (Œîx)", value=0.01, min_value=0.0001, step=0.001, format="%.4f")

if b > a:
    n = int(((b - a) / precision)+1)
    if st.button("Ejecutar b√∫squeda"):
        resultado = busqueda_exhaustiva_animada(a, b, n, funcion)
        st.success(f"Intervalo con m√≠nimo encontrado: {resultado}")
else:
    st.error("El l√≠mite superior debe ser mayor que el inferior.")
