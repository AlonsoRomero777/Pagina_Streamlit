import streamlit as st
import math
import matplotlib.pyplot as plt
import Fase_De_Acotamiento as BP
import time


def lata(r: float) -> float:
    if r == 0:
        return float('inf')
    return 2 * math.pi * r * r + (500 / r)

def caja(l: float) -> float:
    return -(4 * l**3 - 60 * l**2 + 200 * l)

def funcion_0(x: float) -> float:
    if x == 0:
        return float('inf')
    return x**2 + (54 / x)

def funcion_1(x: float) -> float:
    return x**3 + 2 * x - 3

def funcion_2(x: float) -> float:
    return x**4 + x**2 - 33

def funcion_3(x: float) -> float:
    return 3 * x**4 - 8 * x**3 - 6 * x**2 + 12 * x



def primeraDerivada(x: float, delta: float, funcion: callable):
    return ((funcion(x + delta) - funcion(x - delta)) / (2 * delta))


def Biseccion(a: float, b: float, epsilon: float, funcion: callable):
    z = (a + b) / 2
    funcionz = primeraDerivada(z, epsilon, funcion)

    px = [z]
    py = [funcion(z)]

    grafico_placeholder = st.empty()

    while abs(funcionz) > epsilon and (z > a) and (z < b):
        if funcionz < 0:
            a = z
        else:
            b = z

        z = (a + b) / 2
        funcionz = primeraDerivada(z, epsilon, funcion)
        px.append(z)
        py.append(funcion(z))

        fig, ax = plt.subplots()
        ax.plot(px, py, label='Evaluaciones')
        ax.scatter(px, py, color='red', label='Puntos visitados')
        ax.set_title("M√©todo de Bisecci√≥n")
        ax.set_xlabel("x")
        ax.set_ylabel("f(x)")
        ax.grid(True)
        ax.legend()
        grafico_placeholder.pyplot(fig)

        time.sleep(0.3)  

    return z, px, py



st.title("M√©todo de Bisecci√≥n")

texto_justificado = """
<div style="text-align: justify;">
<p>El <strong>m√©todo de bisecci√≥n</strong> es una t√©cnica num√©rica simple y robusta para encontrar ra√≠ces de funciones continuas. 
Se basa en el <strong>Teorema del Valor Intermedio</strong>, el cual establece que si una funci√≥n continua cambia de signo 
en un intervalo [a, b] (es decir, si <i>f(a) ¬∑ f(b) &lt; 0</i>), entonces existe al menos una ra√≠z en ese intervalo.</p>

<p>El algoritmo consiste en dividir el intervalo a la mitad en cada iteraci√≥n y evaluar la funci√≥n en el punto medio. 
Seg√∫n el signo de la funci√≥n en ese punto, se elige el subintervalo en el que persiste el cambio de signo. 
Este proceso se repite sucesivamente hasta que el tama√±o del intervalo sea suficientemente peque√±o, garantizando que la ra√≠z 
est√© contenida dentro de dicho intervalo con una precisi√≥n deseada.</p>

<p><strong>Ventajas:üëç</strong></p>
<ul>
<li>Muy f√°cil de implementar y comprender.</li>
<li>Garantiza convergencia si se cumple la condici√≥n de cambio de signo.</li>
<li>No requiere derivadas ni informaci√≥n adicional de la funci√≥n.</li>
<li>Es √∫til con funciones no suaves, no derivables o ruidosas.</li>
</ul>

<p><strong>Desventajas:üëé</strong></p>
<ul>
<li>Convergencia lenta (lineal) en comparaci√≥n con m√©todos como Newton-Raphson o la secante.</li>
<li>No se puede aplicar si la funci√≥n no cambia de signo en el intervalo inicial.</li>
<li>No identifica m√∫ltiples ra√≠ces dentro del mismo intervalo.</li>
</ul>

<p>El m√©todo de bisecci√≥n es ideal cuando se busca seguridad y robustez en la localizaci√≥n de ra√≠ces, especialmente en 
problemas donde otras t√©cnicas pueden fallar por falta de derivadas, mal comportamiento de la funci√≥n, o sensibilidad a 
la elecci√≥n del punto inicial.</p>
</div>
"""

st.markdown(texto_justificado, unsafe_allow_html=True)


funciones = {
    "Lata": (lata, 0.2, 5.0),
    "Caja": (caja, 0.2, 5.0),
    "Funci√≥n 0: x¬≤ + 54/x": (funcion_0, 0.5, 5.0),
    "Funci√≥n 1: x¬≥ + 2x - 3": (funcion_1, 0.5, 5.0),
    "Funci√≥n 2: x‚Å¥ + x¬≤ - 33": (funcion_2, -2.5, 2.5),
    "Funci√≥n 3: 3x‚Å¥ - 8x¬≥ - 6x¬≤ + 12x": (funcion_3, -1.5, 3.0),
}


opcion = st.selectbox("Selecciona una funci√≥n:", list(funciones.keys()))
funcion, x0_default, d_default = funciones[opcion]

x0 = st.number_input("Valor inicial x‚ÇÄ", value=x0_default, step=0.1)
delta = st.number_input("Valor de incremento Œî", value=d_default, step=0.1)
epsilon = st.number_input("Tolerancia Œµ", min_value=0.0001, value=0.001, step=0.0001, format="%.4f")

if st.button("Ejecutar"):
    try:
        intervalo = BP.fase_acotamiento(x0, delta, 0.1, funcion)
        st.success(f"Intervalo encontrado: {intervalo}")

        minimo, px, py = Biseccion(*intervalo, epsilon, funcion)
        st.write(f"Resultado m√≠nimo: x = {minimo:.5f}, f(x) = {funcion(minimo):.5f}")

        fig, ax = plt.subplots()
        ax.plot(px, py, label='Evaluaciones')
        ax.scatter(px, py, color='red', label='Puntos visitados')
        ax.set_title("M√©todo de Bisecci√≥n")
        ax.set_xlabel("x")
        ax.set_ylabel("f(x)")
        ax.grid(True)
        ax.legend()
        
    except Exception as e:
        st.error(f"Ocurri√≥ un error: {e}")
