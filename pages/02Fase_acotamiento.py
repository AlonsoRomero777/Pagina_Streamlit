import math
import numpy as np
import matplotlib.pyplot as plt
import streamlit as st
import time



def funcion_00(x: float) -> float:
    return x**2 + 3

def lata(r: float) -> float:
    return 2 * math.pi * r * r + (500 / r)

def caja(l: float) -> float:
    return -(4 * pow(l, 3) - 60 * l * l + 200 * l)

def funcion_0(x: float) -> float:
    return float('inf') if x == 0 else x**2 + (54/x)

def funcion_1(x: float) -> float:
    return x**3 + 2*x - 3

def funcion_2(x: float) -> float:
    return x**4 + x**2 - 33

def funcion_3(x: float) -> float:
    return 3*x**4 - 8*x**3 - 6*x**2 + 12*x

import time
def fase_acotamiento(x0, delta, lambda_, funcion, max_iter=1000, max_x=1e6):
    x1 = x0
    x2 = x1 + delta if funcion(x1 + delta) < funcion(x1) else x1 - delta
    k = 1
    
    valores_x = [x1, x2]
    valores_y = [funcion(x1), funcion(x2)]
    
    grafico_placeholder = st.empty()
    
    while funcion(x2) < funcion(x1):
        if abs(x2) > max_x or k > max_iter:
            st.warning("Se alcanz√≥ el l√≠mite de iteraciones o crecimiento.")
            break
        
        # Visualizar progreso en cada paso
        fig, ax = plt.subplots()
        ax.plot(valores_x, valores_y, 'bo-', label='Evaluaciones')
        ax.set_xlabel('x')
        ax.set_ylabel('f(x)')
        ax.set_title(f'Iteraci√≥n {k}: Fase de Acotamiento')
        ax.legend()
        grafico_placeholder.pyplot(fig)
        time.sleep(0.4)

        # Continuar con el algoritmo
        x1 = x2
        delta *= lambda_
        x2 = x1 + delta if x2 > x0 else x1 - delta
        valores_x.append(x2)
        valores_y.append(funcion(x2))
        k += 1

    # Mostrar gr√°fico final completo
    fig, ax = plt.subplots()
    ax.plot(valores_x, valores_y, 'ro-', label='Evaluaciones Finales')
    ax.axvline(min(x1, x2), color='green', linestyle='--', label='L√≠mite inferior')
    ax.axvline(max(x1, x2), color='blue', linestyle='--', label='L√≠mite superior')
    ax.set_xlabel('x')
    ax.set_ylabel('f(x)')
    ax.set_title('Fase de Acotamiento: Intervalo Final')
    ax.legend()
    grafico_placeholder.pyplot(fig)

    return min(x1, x2), max(x1, x2)


st.title("Fase de Acotamiento ü§ñ")

st.markdown("""
<style>
.justify-text {
    text-align: justify;
}
</style>

<div class="justify-text">

<p>El <strong>m√©todo de fase de acotamiento</strong> es una t√©cnica utilizada para <strong>localizar un intervalo</strong> que contenga 
el m√≠nimo de una funci√≥n unimodal. Se trata de una fase preliminar dentro de muchos algoritmos de optimizaci√≥n unidimensional, 
ya que no busca directamente el m√≠nimo, sino que lo acota dentro de un rango definido para posteriormente aplicar m√©todos m√°s precisos.</p>

<p>El algoritmo comienza con un <strong>punto inicial</strong> y una <strong>delta</strong> (peque√±o desplazamiento), y eval√∫a la funci√≥n en dos 
direcciones: una hacia adelante y otra hacia atr√°s. En funci√≥n de las evaluaciones, determina hacia d√≥nde moverse para continuar con la b√∫squeda. 
Posteriormente, se aplica una estrategia de b√∫squeda <strong>exponencial</strong> utilizando un par√°metro de expansi√≥n <strong>Œª (lambda)</strong>, 
aumentando progresivamente la distancia hasta que se detecta un cambio de tendencia en los valores de la funci√≥n.</p>

<p>Este proceso garantiza, bajo el supuesto de <strong>unimodalidad</strong> de la funci√≥n, que el m√≠nimo se encuentra dentro del intervalo final 
generado por el m√©todo.</p>

<h4>üëç Ventajas:</h4>
<ul>
<li>No requiere derivadas.</li>
<li>Simple de implementar.</li>
<li>Sirve como etapa previa para otros m√©todos (como b√∫squeda dorada o parabolizaci√≥n).</li>
</ul>

<h4>üëé Desventajas:</h4>
<ul>
<li>No encuentra el m√≠nimo exacto, solo lo acota.</li>
<li>Puede ser ineficiente si la funci√≥n no es unimodal en el intervalo.</li>
<li>Sensibilidad a los par√°metros iniciales (delta, lambda).</li>
</ul>

<h4> ¬øQu√© puedes hacer en esta aplicaci√≥n?</h4>
<ul>
<li>Seleccionar la funci√≥n a optimizar.</li>
<li>Definir el <strong>punto inicial</strong> de la b√∫squeda.</li>
<li>Ajustar el tama√±o de paso <strong>Œî (delta)</strong>.</li>
<li>Configurar el factor de expansi√≥n <strong>Œª (lambda)</strong>.</li>
<li>Visualizar el proceso de expansi√≥n y el intervalo resultante donde se encuentra el m√≠nimo.</li>
</ul>

</div>
""", unsafe_allow_html=True)

funciones = {
    "x¬≤ + 3": funcion_00,
    "Lata (√°rea)": lata,
    "Caja (volumen negativo)": caja,
    "x¬≤ + 54/x": funcion_0,
    "x¬≥ + 2x - 3": funcion_1,
    "x‚Å¥ + x¬≤ - 33": funcion_2,
    "3x‚Å¥ - 8x¬≥ - 6x¬≤ + 12x": funcion_3,
    "Funci√≥n Personalizada": None
}

opcion = st.selectbox("**Selecciona la funci√≥n**", list(funciones.keys()))

if opcion == "Funci√≥n Personalizada":
    expresion = st.text_input("Escribe tu funci√≥n en t√©rminos de x (ej. x**2 + 3*x - 1):", value="x**2")
    try:
        funcion_seleccionada = lambda x: eval(expresion, {"x": x, "math": math, "np": np})
        st.success("Funci√≥n personalizada cargada correctamente.")
    except Exception as e:
        st.error(f"Error al interpretar la funci√≥n: {e}")
        funcion_seleccionada = None
else:
    funcion_seleccionada = funciones[opcion]

x0 = st.number_input("Punto inicial (x‚ÇÄ)", value=1.0)
delta = st.number_input("Delta inicial (Œî)", value=0.01, min_value=0.0001)
lambda_ = st.number_input("Lambda (Œª)", value=2.0, min_value=1.01)


if st.button("Ejecutar fase de acotamiento"):
    intervalo = fase_acotamiento(x0, delta, lambda_, funcion_seleccionada)
    st.success(f"Intervalo encontrado: [{intervalo[0]:.4f}, {intervalo[1]:.4f}]")
