import numpy as np
import matplotlib.pyplot as plt
import math
import streamlit as st
import time

# Funciones objetivo
def funcion_00(x: float) -> float:
    return x**2 + 3

def lata(r: float) -> float:
    return 2 * math.pi * r * r + (500 / r)

def caja(l: float) -> float:
    return -(4 * pow(l, 3) - 60 * l * l + 200 * l)

def funcion_0(x: float) -> float:
    return float('inf') if x == 0 else x**2 + (54/x)

def funcion_1(x: float) -> float:
    return x**3 + 2*x - 3

def funcion_2(x: float) -> float:
    return x**4 + x**2 - 33

def funcion_3(x: float) -> float:
    return 3*x**4 - 8*x**3 - 6*x**2 + 12*x

funciones = {
    "x¬≤ + 3": funcion_00,
    "Lata (√°rea)": lata,
    "Caja (volumen negativo)": caja,
    "x¬≤ + 54/x": funcion_0,
    "x¬≥ + 2x - 3": funcion_1,
    "x‚Å¥ + x¬≤ - 33": funcion_2,
    "3x‚Å¥ - 8x¬≥ - 6x¬≤ + 12x": funcion_3
}

def fibonacci(n):
    fib = [0, 1]
    for _ in range(2, n+1):
        fib.append(fib[-1] + fib[-2])
    return fib

def Busqueda_Fibonacci(a: float, b: float, n: int, epsilon: float, func: callable):
    fib = fibonacci(n+1)
    points = []

    k = 2
    L = b - a

    Lk = (fib[n-k+1] / fib[n+1]) * L
    x1 = a + Lk
    x2 = b - Lk

    f_x1 = func(x1)
    f_x2 = func(x2)

    points.append((x1, f_x1))
    points.append((x2, f_x2))
    min_intervalo = (a, b)

    grafico_placeholder = st.empty()
    rango_grafica = (a, b)
    
    while k < n:
        if f_x1 > f_x2:
            a = x1
            x1 = x2
            x2 = b - ((fib[n-k] / fib[n+1]) * L)
            f_x1 = f_x2
            f_x2 = func(x2)
            points.append((x2, f_x2))
        else:
            b = x2
            x2 = x1
            x1 = a + ((fib[n-k] / fib[n+1]) * L)
            f_x2 = f_x1
            f_x1 = func(x1)
            points.append((x1, f_x1))

        min_intervalo = (a, b)
        k += 1

        fig = plot_function_with_points(func, rango_grafica[0], rango_grafica[1], points, f"B√∫squeda Fibonacci - {opcion}")
        grafico_placeholder.pyplot(fig)
        time.sleep(0.5)  

    return (a + b) / 2, points, min_intervalo


def plot_function_with_points(func, a, b, points, title):
    x = np.linspace(a, b, 1000)
    y = [func(xi) for xi in x]

    fig, ax = plt.subplots(figsize=(6, 3))
    ax.plot(x, y, label='Funci√≥n', color='blue')
    if points:
        x_points, y_points = zip(*points)
        ax.scatter(x_points, y_points, color='red', label='Puntos evaluados')
    ax.set_title(title)
    ax.set_xlabel("x")
    ax.set_ylabel("f(x)")
    ax.grid(True)
    ax.legend()
    return fig

st.title("B√∫squeda Fibonacci üïµÔ∏è‚Äç‚ôÇÔ∏è")

texto_justificado = """
<div style="text-align: justify;">
<p>El <strong>m√©todo de Fibonacci</strong> es una t√©cnica de optimizaci√≥n unidimensional que, al igual que la b√∫squeda dorada,
se utiliza para encontrar el m√≠nimo o m√°ximo de una funci√≥n unimodal en un intervalo cerrado 
[a, b], sin requerir el uso de derivadas. Sin embargo, el m√©todo de Fibonacci puede ser incluso m√°s
eficiente que la b√∫squeda dorada cuando se conoce de antemano el n√∫mero de iteraciones que se 
desean realizar. Esta eficiencia se logra mediante el uso de los n√∫meros de Fibonacci para determinar 
los puntos de evaluaci√≥n dentro del intervalo.</p>

<p>La base del m√©todo es muy similar a la b√∫squeda dorada: 
se eligen dos puntos dentro del intervalo, se eval√∫a la funci√≥n en ellos y, 
dependiendo de cu√°l valor sea menor, se reduce el intervalo. Lo que lo distingue es 
que las posiciones de los puntos dentro del intervalo no se eligen seg√∫n la raz√≥n √°urea, 
sino seg√∫n la proporci√≥n de n√∫meros de Fibonacci consecutivos, que van cambiando en cada iteraci√≥n.</p>

<p>El algoritmo requiere calcular previamente los n√∫meros de Fibonacci hasta alcanzar una cantidad 
relacionada con la precisi√≥n deseada (es decir, el n√∫mero de iteraciones), y utiliza esos valores 
para ubicar los puntos de evaluaci√≥n. A medida que se avanza en el proceso, el intervalo se 
estrecha de forma controlada, garantizando una buena aproximaci√≥n al m√≠nimo (o m√°ximo) de la funci√≥n.</p>

<p><strong>Ventajas:üëç</strong></p>
<ul>
<li>No requiere derivadas, por lo que es adecuado para funciones no diferenciables.</li>
<li>Es m√°s eficiente que otros m√©todos de b√∫squeda unidimensional cuando se fija un n√∫mero de iteraciones.</li>
<li>Reduce el n√∫mero de evaluaciones de la funci√≥n al m√≠nimo te√≥rico posible en ese marco.</li>
</ul>

<p><strong>Desventajas:üëé</strong></p>
<ul>
<li>Requiere conocer de antemano el n√∫mero total de evaluaciones (o iteraciones).</li>
<li>No es adaptativo; si se necesita m√°s precisi√≥n, se debe reiniciar el proceso con nuevos valores de Fibonacci.</li>
</ul>

<p>En general, la b√∫squeda Fibonacci es una excelente opci√≥n para optimizaci√≥n unidimensional cuando se puede
predecir el n√∫mero de pasos, y proporciona resultados similares a la b√∫squeda dorada, pero con menor
n√∫mero de evaluaciones.</p>
</div>
"""

st.markdown(texto_justificado, unsafe_allow_html=True)


opcion = st.selectbox("**Selecciona la funci√≥n a optimizar**", list(funciones.keys()))
funcion = funciones[opcion]

a = st.number_input("L√≠mite inferior (a)", value=0.0, key="a_fib")
b = st.number_input("L√≠mite superior (b)", value=5.0, key="b_fib")
n = st.number_input("N√∫mero de evaluaciones (n ‚â• 3)", min_value=3, step=1, value=10, key="n_fib")
epsilon = st.number_input("Precisi√≥n deseada (Œµ)", value=0.0001, min_value=1e-6, format="%.6f")

if st.button("Ejecutar m√©todo"):
    if a >= b:
        st.error("El l√≠mite inferior debe ser menor que el superior.")
    else:
        x_min, puntos, intervalo_final = Busqueda_Fibonacci(a, b, n, epsilon, funcion)
        st.success(f"M√≠nimo aproximado en x ‚âà {x_min:.6f}")
        st.write(f"√öltimo intervalo: [{intervalo_final[0]:.6f}, {intervalo_final[1]:.6f}]")

